local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

--https://docs.sirius.menu/rayfield/interaction/interactive-elements#creating-an-adaptive-input-textbox 

local vu = game:GetService("VirtualUser") 

local afkEvent = game.ReplicatedStorage:WaitForChild("AFKEvent",5)
if afkEvent then afkEvent:Destroy() end

require(game.ReplicatedStorage:WaitForChild("_replicationFolder"):WaitForChild("DragonClassClient")) 

local player = game.Players.LocalPlayer

_G.stopped = false

local food = game.Workspace.Interactions.Nodes.Food --"LargeFoodNode".BillboardPart
local genv = getgenv()
local player = game.Players.LocalPlayer

--getgenv().TargetNode = food.LargeFoodNode1

genv.funcs = genv.funcs or {}
genv.initFuncs = genv.initFuncs or {}
genv.currentHooking = genv.currentHooking or {}

local currentHooking = genv.currentHooking

local funcs = genv.funcs

genv.neededFuncs = {"_updateMousePosition",
    "GetEntityToControl",
    "CanEntityDoAction"
    --"_canAimAtPosition",
    --"_getAutoTargetPosition",
    --"_update"
}
if not genv.initFuncs.getFunc then
    genv.initFuncs.getFunc = (function(fName)
        --if not genv.currGc then genv.currGc = getgc() end
        
        for i, v in getgc() do
            
            if type(v) ~= "function" then continue end
            
            local f = debug.info(v, "n") == fName and v or nil
            if f then
                print("Found "..fName.." function!")
                return f
            end
        end
    end)

end


if not genv.initFuncs.init then
    genv.initFuncs.init = (function()
    
        for i, v in genv.neededFuncs do
            local f = genv.initFuncs.getFunc(v)
            if not f then warn('not found '..v) continue end
            genv.funcs[debug.info(f, "n")] = f
        end
    
    end)

end

genv.initFuncs.init()

local updMousePosFunc = genv.funcs._updateMousePosition

local player = game.Players.LocalPlayer
local hrp = player.Character.HumanoidRootPart

local ups = debug.getupvalues(updMousePosFunc)

local autoSellValue = genv.autoSellValue or 0

local shopPlaceId = 3475397644
local mainPlaceId = 4728805070

if game.PlaceId ~= mainPlaceId then return end

local worldIds = {
    Grassland = 3475419198,
    Jungle = 3475422608,
    Volcano = 3487210751,
    Tundra = 3623549100,
    Ocean = 3737848045,
    Desert = 3752680052,
    Fantasy = 4174118306
}

local tpThrough = genv.tpThrough


--local sellRemote = game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("SellItemRemote")
    
local sellArgs = {"ItemName", "Amount"}
local toSell = {"JuniperBerry", "Dragonfruit", "Lime"}

local resourcesFolder = player:WaitForChild("Data"):WaitForChild("Resources")

genv.isTeleporting = false

local tpOnWaiting = nil
local desiredCameraCfr = CFrame.new(314.103821, 69.2530136, 100, 0, 1, -0, 0.5, 1, -0.5, 0.380629182, 1, 0.894421339)

local cmdText = [[
task.spawn(function()
getgenv().AutoFarm = <AutoFVal>
getgenv().autoSellValue = <autoSVal>
getgenv().tpThrough = <tpTVal>
task.wait(10)
loadstring(game:HttpGet('https://raw.githubusercontent.com/fkdAkla/dragon/refs/heads/main/cockhack'))()
end)
]]

for i, v in toSell do
    local val = resourcesFolder:WaitForChild(v)
    val.Changed:Connect(function()
        if autoSellValue == 0 then return end
        if genv.isTeleporting then return end
        if val.Value < autoSellValue then return end
        genv.isTeleporting = true
        local tpRemote = game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("WorldTeleportRemote")
        local s = [==[
    local shopPlaceId = 3475397644
    local mainPlaceId = 4728805070
    if game.PlaceId ~= shopPlaceId then return end
    local remote = game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("SellItemRemote")
    local resourcesFolder = game.Players.LocalPlayer:WaitForChild("Data"):WaitForChild("Resources")
    
    local sellArgs = {"ItemName", "Amount"}
    local tpArgs =  {[1] = <tpTVal>,
    [2] = {}
    }
    local tpRemote = game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("WorldTeleportRemote")
    local toSell = {"JuniperBerry", "Dragonfruit", "Lime"}
    task.wait(5)
    for i, v in toSell do
        remote:FireServer({ItemName = v, Amount = resourcesFolder[v].Value})
    end
    task.wait(1)
    
    local tpThrough = <tpTVal>
    
    warn(tpThrough, typeof(tpThrough))
    if not tpThrough then
        queue_on_teleport("getgenv().AutoFarm = <AutoFVal> getgenv().autoSellValue = <autoSVal> task.wait(20) loadstring(game:HttpGet(('https://raw.githubusercontent.com/fkdAkla/dragon/refs/heads/main/cockhack')))()")
        wait()
        tpRemote:InvokeServer(tpThrough, {})
    else
        queue_on_teleport([=[ task.wait(10) queue_on_teleport([[<partOfCode1>]]) wait() game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("WorldTeleportRemote"):InvokeServer(4728805070, {}) ]=])
        wait()
        tpRemote:InvokeServer(tpThrough, {})
    end
]==]      
        s = s:gsub("<partOfCode1>", cmdText):gsub("<AutoFVal>", tostring(genv.AutoFarm), 10):gsub("<autoSVal>", autoSellValue, 10):gsub("<tpTVal>", tpThrough or "nil", 10)
        queue_on_teleport(s)
        tpRemote:InvokeServer(shopPlaceId, {})
    end)
end

--if true then return end

local oldMouseP
oldMouseP = hookfunction(updMousePosFunc, function(p_u_139, p140)
    -- upvalues: (copy) v_u_19, (ref) v_u_28, (copy) v_u_23, (copy) v_u_12, (copy) v_u_22, (ref) v_u_29
    if genv.currentHooking._updateMousePosition then
        if not p_u_139.IsLocalPlayer then return end
        local v_u_19, v_u_28, v_u_23, v_u_12, v_u_22, v_u_29 = unpack(ups)
        p_u_139.BaseMaxBreathDistance = p_u_139.MaxBreathDistance + (p_u_139.Dragon.Flying and (p_u_139.MaxBreathDistance * v_u_19.FireBreathDistanceWhileFlyingMultiplier or 0) or 0)
        local v141 = v_u_28
        local v142 = p_u_139.BaseMaxBreathDistance
        local v143 = 50
        v141.MaxDistance = v142 + math.abs(v143)

        local newPos = genv.FoodPos or (hrp.CFrame * CFrame.new(0,0,-10)).Position
        p_u_139.LastMousePosition = newPos
        local v144 = p_u_139:_clampPosition((p_u_139:_getTargetPosition(p_u_139.LastMousePosition)))
        p_u_139.Position = v144

            p_u_139.BreathImpactPart.BP.Position = v144
            p_u_139.BreathImpactPart.BG.CFrame = CFrame.new(Vector3.new(0, 0, 0), v144 - v_u_28.UnitRay.Origin)
            if p140 then
                p_u_139.BreathImpactPart.Position = v144
            end
            
            return true
    end
    return oldMouseP(p_u_139, p140)
end)
local camera = workspace.Camera
local function farm()
    _G.stopped = false
    local fire = genv.funcs.GetEntityToControl()
    
    if not fire then return end
    
    genv.AutoFarm = true
    
    if not tpOnWaiting then tpOnWaiting = player.Character:GetPivot() * CFrame.new(0,5,0) end
    local c
    c = camera.ChildAdded:Connect(function(child)
        local handle = child:FindFirstChild("Handle")
        if not handle then return end
        
        
        task.wait(1)
        if not handle then return end
        firetouchinterest(player.Character.HumanoidRootPart, handle, 0)
        
     end)
    game:GetService("RunService"):Set3dRenderingEnabled(false)
    task.spawn(function()
    while task.wait() do
        if _G.stopped then c:Disconnect() return end
        for i, v in food:GetChildren() do
            local bg = v:FindFirstChild("BillboardPart")
            if not bg then continue end
            
            local deadVal = bg.Dead
            
            if deadVal.Value then continue end
            
            camera.CameraType = Enum.CameraType.Scriptable
            
            
            
            --camera.CameraSubject = v["5"]:FindFirstChildWhichIsA("MeshPart")
            local hb = v.Hitbox
            camera.CFrame = CFrame.lookAt(hb.Position + Vector3.new(0, 40,0), hb.Position)

            --camera.CameraSubject = hb
            genv.FoodPos = hb.Position
            
            while task.wait() do
                if _G.stopped then c:Disconnect() return end
                --local mousePos = mouse.Hit.Position
                
                --local tPos = v["2"]:FindFirstChildWhichIsA("MeshPart").CFrame
                local tPos = hb.CFrame * CFrame.new(-15, 0, 0)
                
                player.Character:PivotTo(tPos)--CFrame.new(tPos, mousePos))
                
                if deadVal.Value then fire:_setAttack(false) genv.FoodPos = nil break end
            end
                
            
        end
        
        player.Character:PivotTo(tpOnWaiting)
        
    end
    
    end)
    
    while not _G.stopped do
        task.wait()
        if not genv.FoodPos then continue end
        task.wait(0.5)
        if genv.funcs.CanEntityDoAction(fire, "_setAttack", "Fire") then
        fire:_setAttack(true, "Fire")
        end
        
        task.wait(0.5)
        
        if genv.funcs.CanEntityDoAction(fire, "_setAttack") then
        fire:_setAttack(false)
        end
    end
    
end

player.Idled:connect(function()
  vu:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
    vu:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
end)

vu:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)

local Window = Rayfield:CreateWindow({
   Name = "Cockhack",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "Rayfield Interface Suite",
   LoadingSubtitle = "by Sirius",
   Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = false,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Big Hub"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local MainTab = Window:CreateTab("Main", "app-window") -- Title, Image

local Section = MainTab:CreateSection("Farm")

local Label = MainTab:CreateLabel("Anti Afk is Enabled", 4483362458, nil, false) -- Title, Icon, Color, IgnoreTheme

local Toggle = MainTab:CreateToggle({
   Name = "Food Farm",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
       if Value then
           genv.currentHooking._updateMousePosition = true
           farm()
        else
            _G.stopped = true
            genv.AutoFarm = false
            genv.currentHooking._updateMousePosition = nil
            camera.CameraType = Enum.CameraType.Custom
            game:GetService("RunService"):Set3dRenderingEnabled(true)
            player.Character:PivotTo(tpOnWaiting)
            --camera.CameraSubject = player.Character
        end
   end,
})

local Label2 = MainTab:CreateLabel("Auto Sell (Wasteland food)", 4483362458, nil, false) -- Title, Icon, Color, IgnoreTheme

local Slider = MainTab:CreateSlider({
   Name = "Auto Sell (0 = disable)",
   Range = {50, 10000},
   Increment = 50,
   Suffix = "Value",
   CurrentValue = autoSellValue,
   Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
       autoSellValue = Value
   end,
})

local Dropdown = MainTab:CreateDropdown({
   Name = "AutoSell: Teleport Through A World",
   Options = {"None","Grassland","Jungle","Volcano","Tundra","Ocean","Desert","Fantasy"},
   CurrentOption = {"None"},
   MultipleOptions = false,
   Flag = "Dropdown1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Options)
       if Options[1] == "None" then tpThrough = nil return end
       tpThrough = worldIds[Options[1]]
   end,
})

local performanceTab = Window:CreateTab("Performance", "battery-charging")

performanceTab:CreateSlider({
    Name = "Set Fps Cap (0 = Default)",
   Range = {20, 60},
   Increment = 5,
   Suffix = "FPS",
   CurrentValue = 0,
   Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
       if Value == 0 then return end
       setfpscap(Value)
   end,
})

if genv.AutoFarm then
    task.spawn(function()
        task.wait(1)
        Toggle:Set(true)
    end)
end

if genv.tpThrough then
    task.spawn(function()
        task.wait(1)
        local found = (function() for i, v in worldIds do if v == genv.tpThrough then return i end end end)()
        Dropdown:Set({found})
    end)
end

--task.wait(10)

--Rayfield:Destroy()
